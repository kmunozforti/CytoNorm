% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CytoNorm.R
\name{CytoNorm.normalize}
\alias{CytoNorm.normalize}
\title{normalizeClustered}
\usage{
CytoNorm.normalize(
  model,
  files,
  labels,
  transformList,
  transformList.reverse,
  outputDir = ".",
  prefix = "Norm_",
  clean = TRUE,
  verbose = FALSE,
  normMethod.normalize = QuantileNorm.normalize,
  write = TRUE,
  ...
)
}
\arguments{
\item{model}{Model of the batch effercts, as computed by
\code{\link{CytoNorm.train}}}

\item{files}{Full paths of the fcs files or a flowSet of the samples.}

\item{labels}{A label for every file, indicating to which batch it
belongs, e.g. the plate ID.}

\item{transformList}{Transformation list to pass to the flowCore
\code{transform} function}

\item{transformList.reverse}{Transformation list with the reverse functions,
so the normalized files can be saved in the untransformed
space}

\item{outputDir}{Directory to put the temporary files in. Default = "."}

\item{prefix}{Prefix to put in front of the normalized file names.
Default = "Norm_"}

\item{clean}{If FALSE, temporary files describing the FlowSOM clusters
seperately are not removed at the end. Default = TRUE.}

\item{verbose}{If TRUE, progress updates are printed. Default = FALSE.}

\item{normMethod.normalize}{Normalization method to use.}

\item{write}{logical indicating whether the normalised samples should 
be written to new FCS files in a \code{Normalized} 
directory within \code{outputDir}, set to TRUE by default.}

\item{...}{Additional arguments to pass to read.FCS}
}
\value{
a flowSet containing the normalised samples and optionally write FCS
                   files to \code{Normalized} directory in \code{outputDir}.
}
\description{
Normalize data, given the batch effects learned from control samples per
cell type/cluster (output from \code{\link{CytoNorm.train}}). New fcs files
are written to the given output directory.
}
\examples{


dir <- system.file("extdata", package = "CytoNorm")
files <- list.files(dir, pattern = "fcs$")
data <- data.frame(File = files,
                   Path = file.path(dir, files),
                   Type = stringr::str_match(files, "_([12]).fcs")[,2],
                   Batch = stringr::str_match(files, "PTLG[0-9]*")[,1],
                   stringsAsFactors = FALSE)
data$Type <- c("1" = "Train", "2" = "Validation")[data$Type]
train_data <- dplyr::filter(data, Type == "Train")
validation_data <- dplyr::filter(data, Type == "Validation")

ff <- flowCore::read.FCS(data$Path[1])
channels <- grep("Di$", flowCore::colnames(ff), value = TRUE)
transformList <- flowCore::transformList(channels,
                                         cytofTransform)
transformList.reverse <- flowCore::transformList(channels,
                                                 cytofTransform.reverse)

model <- CytoNorm.train(files = train_data$Path,
                        labels = train_data$Batch,
                        channels = channels,
                        transformList = transformList,
                        FlowSOM.params = list(nCells = 10000, #1000000
                                              xdim = 15,
                                              ydim = 15,
                                              nClus = 10,
                                              scale = FALSE),
                        normParams = list(nQ = 101),
                        seed = 1,
                        verbose = TRUE)

CytoNorm.normalize(model = model,
                   files = validation_data$Path,
                   labels = validation_data$Batch,
                   transformList = transformList,
                   transformList.reverse = transformList.reverse,
                   verbose = TRUE)

}
\seealso{
\code{\link{CytoNorm.train}}
}
